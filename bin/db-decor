#!/usr/bin/env node

const { program } = require('commander')
const path = require('path')
const { 
    init,
    add,
    remove,
    update,
    rollback,
    loadSettings
} = require('../dist/cli')

const settings = loadSettings()
const dbModelsPath = path.resolve(settings.buildDir, settings.models)
require(dbModelsPath)

const { State } = require('../dist/lib')

program
    .version('0.0.1')
    
program
    .command('init')
    .description('Initialize the projects with and create the structure')
    .action(() => init(settings, State))
    
program
    .command('add <migration-name>')
    .description('Creates a new migration', {
        name: 'The name of the migration'
    })
    .action(name => add(settings, State, name))

program
    .command('remove')
    .description('Removes all unused migrations')
    .action(() => remove(settings, State))
    
program
    .command('update')
    .option('-n --name', 'Name of the migration')
    .option('-i --index', 'Index of the migration')
    .description('Update the database to the newest, or provided migration')
    .action(({ name, index }) => {
        var migration = name 
            ? name
            : Number(index) !== NaN
                ? Number(index)
                : void 0
                
        update(settings, State, migration)
    })
    
program
    .command('rollback')
    .description('Rollbacks the database to previous, or the provided migration')
    .option('-n --name <migration-name>', 'Name of the migration')
    .option('-i --index <migration-index>', 'Index of the migration')
    .action(({ name, index }) => {
        var migration = name 
            ? name
            : Number(index) !== NaN
                ? Number(index)
                : void 0
                
        rollback(settings, State, migration)
    })

program
    .parse()
